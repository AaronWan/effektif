/*
 * Copyright 2014 Effektif GmbH.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.effektif.workflow.api.workflow;

import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.effektif.workflow.api.xml.XmlElement;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;


/** common data fields for any object in a {@link Workflow}. */
public class Element {
  
  public static final Set<String> INVALID_PROPERTY_KEYS = new HashSet<>(Arrays.asList(
          "id", "name", "description", "bpmn"));

  protected String id;
  protected String name;
  protected String description;
  protected XmlElement bpmn;
  protected Map<String,Object> properties;
  
  /** identifier.  
   * For Workflow's, id's are generated by the workflow engine.
   * For all other elements inside a workflow, the id's correspond to the BPMN id attribute. */
  public String getId() {
    return this.id;
  }
  /** @see #getId() */
  public void setId(String id) {
    this.id = id;
  }
  /** @see #getId() */
  public Element id(String id) {
    this.id = id;
    return this;
  }

  /** human readable label used when visually displaying the element.
   * This corresponds to the BPMN name attribute. */
  public String getName() {
    return this.name;
  }
  /** @see #getName() */
  public void setName(String name) {
    this.name = name;
  }
  /** @see #getName() */
  public Element name(String name) {
    this.name = name;
    return this;
  }

  /** longer human readable description for the element.
   * This corresponds to the BPMN documentation/ attribute. */
  public String getDescription() {
    return this.description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public Element description(String description) {
    this.description = description;
    return this;
  }

  /** This way the BPMN parser can stick all non-parsed BPMN XML in the object. 
   * BPMN requires that all XML in an imported file that is not understood should 
   * be kept and included into the exported BPMN file. */
  public XmlElement getBpmn() {
    return this.bpmn;
  }
  /** @see #getBpmn() */
  public void setBpmn(XmlElement bpmn) {
    this.bpmn = bpmn;
  }
  
  /** This way the BPMN parser can stick all non-parsed BPMN XML in the object. 
   * BPMN requires that all XML in an imported file that is not understood should 
   * be kept and included into the exported BPMN file. */
  @JsonAnyGetter
  public Map<String,Object> getProperties() {
    return this.properties;
  }
  /** @see #getProperties() */
  public void setProperties(Map<String,Object> properties) {
    if (properties!=null) {
      for (String key: properties.keySet()) {
        checkPropertyKey(key);
      }
    }
    this.properties = properties;
  }
  /** @see #getProperties() */
  public Element property(String key,Object value) {
    setProperty(key, value);
    return this;
  }
  /** @see #getProperties() */
  public Element propertyOpt(String key,Object value) {
    if (value!=null) {
      setProperty(key, value);
    }
    return this;
  }
  /** @see #getProperties() */
  public Object getProperty(String key) {
    return properties!=null ? properties.get(key) : null;
  }
  /** @see #getProperties() */
  @JsonAnySetter
  public void setProperty(String key,Object value) {
    checkPropertyKey(key);
    if (properties==null) {
      properties = new HashMap<>();
    }
    this.properties.put(key, value);
  }
  /** only sets the property if the value is not null */
  public void setPropertyOpt(String key,Object value) {
    if (value==null) {
      return;
    }
    setProperty(key, value);
  }
  public Object removeProperty(String key) {
    return properties!=null ? properties.remove(key) : null;
  }

  protected void checkPropertyKey(String key) {
    if (key==null || INVALID_PROPERTY_KEYS.contains(key)) {
      throw new RuntimeException("Invalid property '"+key+"'");
    }
  }
}
